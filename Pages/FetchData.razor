@page "/fetchdata"
@using FundamentosBlazor.Data
@using FundamentosBlazor.Pages.Transacciones

@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<Transaccion OnTransaccion="ManejadorOnTransaccion"></Transaccion>

@if (forecasts == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table @fondoCss">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    //Eventos
    public string fondoCss = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);

        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }


    //Eventos
    private void ManejadorOnTransaccion(string resultado)
    {
        switch (resultado)
        {
            case "Aprobada":
                fondoCss = "bg-success";
                break;
            case "Declinada":
                fondoCss = "bg-danger";
                break;
            default:
                break;
        }
    }
}
